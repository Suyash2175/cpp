#include <iostream>
#include <vector>

void displayMatrix(const std::vector<std::vector<double>>& matrix) {
    for (const auto& row : matrix) {
        for (double element : row) {
            std::cout << element << " ";
        }
        std::cout << std::endl;
    }
}

void gaussianElimination(std::vector<std::vector<double>>& matrix) {
    int rows = matrix.size();
    int cols = matrix[0].size() - 1;  // Last column is for constants

    for (int i = 0; i < rows - 1; ++i) {
        // Make the diagonal element 1
        for (int j = i + 1; j < rows; ++j) {
            double ratio = matrix[j][i] / matrix[i][i];
            for (int k = i; k < cols + 1; ++k) {
                matrix[j][k] -= ratio * matrix[i][k];
            }
        }
    }

    // Back-substitution
    for (int i = rows - 1; i >= 0; --i) {
        for (int j = i + 1; j < rows; ++j) {
            matrix[i][cols] -= matrix[i][j] * matrix[j][cols];
        }
        matrix[i][cols] /= matrix[i][i];
    }
}

int main() {
    // Example matrix (augmented matrix)
    std::vector<std::vector<double>> matrix = {
        {2, 1, -1, 8},
        {-3, -1, 2, -11},
        {-2, 1, 2, -3}
    };

    std::cout << "Original Matrix:" << std::endl;
    displayMatrix(matrix);

    gaussianElimination(matrix);

    std::cout << "\nMatrix after Gaussian Elimination:" << std::endl;
    displayMatrix(matrix);

    return 0;
}
